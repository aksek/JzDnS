import os
import platform

#test = ARGUMENTS.get('test', 0)
if platform.system() == "Windows":
    print("Windows!")
    env = Environment()
    env.Append(LINKFLAGS='/SUBSYSTEM:CONSOLE') 
    env.Append(CXXFLAGS='/EHsc /MD /std:c++17')
    env.Append(CPPPATH=['D:/boost_1_76_0/', './src'])
    env.Append(LIBPATH='D:/boost_1_76_0/stage/lib/')
    VariantDir('./build', './src', duplicate=0)
    VariantDir('./build/test', './src/test', duplicate=0)
#    if not test:
#        env.Program( 'test', [Glob("./build/*.cpp")])
#    else:
#        env.Program( 'test', [Glob("./build/*.cpp"), Glob("./build/test/*.cpp")])
    env.Program( 'test', [Glob("./build/*.cpp"), Glob("./build/test/*.cpp")])

elif platform.system() == "Linux":
    print("Linux!")
    env = Environment() 
    env.Append(CPPPATH = ['/usr/local/boost_1_76_0/', './src'])
    env.Append(LIBPATH='/usr/local/boost_1_76_0/stage/lib/')
    env.Append(CXXFLAGS='-pedantic -Wall -std=c++17')
    VariantDir('./build', './src', duplicate=0)
    VariantDir('./build/test', './src/test', duplicate=0)
#    if not test:
#        env.Program( 'test', [Glob("./build/*.cpp")])
#    else:
#        env.Program( 'test', [Glob("./build/*.cpp"), Glob("./build/test/*.cpp")])
    env.Program( 'test', [Glob("./build/*.cpp"), Glob("./build/test/*.cpp")], LIBS = ['boost_unit_test_framework', 'cryptopp'])

else:
    print("Nieodpowiedni system!")
